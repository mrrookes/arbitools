\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename arbitools.info
@settitle Chess Arbiter Tools
@c %**end of header

@copying
This manual is for Chess Arbiter Tools.

Copyright @copyright{} 2015 David Gonzalez Gandara.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation.
@end quotation
@end copying

@titlepage
@title Chess Arbiter Tools
@subtitle arbitools
@author David Gonzalez Gandara

@c  The following two commands
@c  start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying


@end titlepage

@ifnottex
@node Top
@top Chess Arbiter Tools
@insertcopying
@end ifnottex

@contents

@menu
* Introduction: Introduction
* History: History
* Installation: Installation
* Usage: Usage
* File Formats: File Formats
* Common Arbiters Tasks with Emacs: Common Arbiters Tasks with Emacs
* Common Arbiters Tasks with the command line interface: Common Arbiters Tasks with the command line interface
* The python library: The python library
* Troubleshooting: Troubleshooting

@end menu

@node    Introduction
@chapter Introduction

Chess Arbiter Tools were born as a solution to a situation where chess arbiters are forced to use privative software because of the lack of free (as in libre, not as in free beer)tournament management tools. It consists of a group of programs that allows the arbiter to do some important tasks in tournaments, such as maintaining the players database up to date or produce reports.

The philosophy is to provide the arbiter with more freedom over the tournament files. The most common programs (usually privative software) don't usually allow direct operations  on the files, so the arbiter has to stick to the possibilities the program offers. The alternative is to allow the arbiter with complete control over the files during the tournament.

Apart from that, as it happens with any other free software program, if the user is not happy with the way the program does stuff, he or she can just change the code to make it works the way he or she likes.

I wrote these tools to simplify my work in real chess tournaments. It has not been widely tested, although I tested it in a few tournaments successfully. Please send me your oppinions and suggestions if you use it for your tournaments, so that the program can go beyond beta state.  

@node History
@chapter History

This project started as a python library, with the idea of making it available in many platforms easily, and also, to make the integration with other similar projects possible. During the process, I realised that this was not the best way to do it. I saw that most of the work was to maintain a tournament file in plain text format. Emacs, then, emerged as the perfect environment. It makes easy to do the color highlighting for the different sections of the file, plus the possibility to do all kind of operations using ELISP. It is also a good cross-platform environment. And easier to install than python.

As a result, Arbitools became an Emacs package. From this point, the new features will be implemented in ELISP. The ``old'' python scripts will be used for some time, until all the code is translated into Emacs functions.

I realize that managing a tournament in Emacs is not the most user friendly experience, but I think it is important to have the possibility to manage a tournament completely with free (as in freedom) tools. Up to now, it is possible to do almost every task in a tournament: creating the crosstable for FIDE, insert players, do the pairings, delete rounds, create the report forms, and some more. Also, I think it is good for the arbiters to be aware on how the FIDE file is structured. This is a good knowledge that can be applied in a lot of situations: the file from the file manager is corrupted, someone has to be changed and it is not allowed in the software, etc.

@node Installation
@chapter Installation
@section Installing the Python package
Most of the functions of Arbitools are still supported through the python scripts. If you want to use them, you have to install the arbitools python package. The latest version is in @url{http://www.github.com/mrrookes/arbitools}. Then do:

@code{python3 setup.py install}

Arbitools is in @url{https://pypi.org} too, so you can just type:

@code{pip3 install arbitools} 

The program should work in other platforms, but I don't intend to check it in other systems apart from GNU/Linux. If you have problems installing it, it may work using the scripts directly from the folder where you downloaded the scripts.

@section Installing bbpPairings
Arbitools is able to do the pairings for a tournament thanks to this fantastic tool that you can find under a GPL license in @url{http://https://github.com/BieremaBoyzProgramming/bbpPairings}. You will find binary files for different platforms. Download it and copy it to a folder that is executable. In GNU/Linux, you can copy to ``/usr/bin''. Using arbitools and bbpPairings is, in my opinion, a perfect example of how the free software community should maintain a chess tournament manager project. Two free modules that can work together and be maintained independently.

To use bbpPairings on a file, you have to make sure that the field ``XXR'' exists, followed by the number of rounds in the tournament. If you wish, you can remove that line before sending the report to your federation. This is an extension of the structure of the file, which you can find in the FIDE website @url{https://www.fide.com/FIDE/handbook/C04Annex2_TRF16.pdf}. @xref{Usage} for an image where you can see where to place the ``XXR'' field.

@section Installing Emacs
The main interface of Arbitools is Emacs, you should install it in order to get the most of it. You can get it in @url{http:/gnu.org/software/emacs}. Emacs is available for different platforms.

Then, install the ``arbitools.el'' package. In Emacs, type the following:

@code{M-x list-packages}

In Emacs, the keys ``M-x'' means ``Alt+x''. You will get this window:

@image{arbitoolsinstall, 640, 480}

Clik on the arbitools package link and then, click install. After that, the arbitools-mode will load automatically for files with the .trf extension. For other files you have to type:

@code{M-x arbitools-mode}

If you can't install the package for whatever reason, you can allways download the file and insert in Emacs the command:

@code{M-x load-file}

Then write the path where you downloaded ``arbitools.el''

@section Installing Python
You may need to install python in order to use some features that have not been yet translated to Emacs. If you use GNU/Linux it is most likely already installed, but not in other systems. You can get the latest version from @url{http://www.python.org/downloads}. Remember to download 3.*.* and not 2.*.*.

@section Other files you may need

@indentedblock
@emph{players_list_xml.xml} You need this file if you want to update the FIDE ratings of the players. You can download it from @url{http://ratings.fide.com/download/players_list_xml.zip}.
@end indentedblock

@indentedblock
@emph{elo_feda.xls} You need this file if you want to update the FEDA ratings of the players. You can get it here @url{http://www.feda.org/web/index.php/elo}. The file has a different name, but you need to rename it to ``elo_feda.xls''
@end indentedblock


@indentedblock
@emph{FIDE-FEDA Vega.csv} Alternatively, you can use this file, which contain either FIDE ratings and FEDA ratings. This file is maintained by Jesus Mena. You can get it here @url{http://www.jemchess.com}
@end indentedblock


@indentedblock
@emph{custom_elo.csv} It is recommended that you create this file, with the header described in the section ``File Formats'' (@xref{File Formats}). Add the data of the players you really need and update monthly with the official lists. Make sure the FIDE and FEDA codes are correct.
@end indentedblock

Keep these files in your personal folder (/home/<user>) in GNU/Linux.


@node    Usage
@chapter Usage

The recommended frontend for Arbitools is Emacs. It is the most GNU way of managing a tournament. For some time, you will also be able to use the command line interface.
@section Emacs environment
As I said before, the most logical way to use ``Chess Arbiter Tools'' is through Emacs. It combines the possibility of directly edit the tournament files, run the arbitool commands and launch a pairing engine. To do this, you have to install the ``arbitools.el'' package. Instructions in the ``Instalation'' section (@xref{Installation}).

You can use all the power of Emacs to manage the file, plus the different Arbitools functions and the pairing engines. You will find the menu entry ``Arbitools'', with the functions available. It also is possible to search and replace text, to copy and paste, etc.
@image{arbitoolsel, 640, 480}

The functions available are: ``New Tournament'', ``Insert Player'', ``Delete Player'', ``Do Pairings'', ``Insert Result'', etc. Some of them require external programs that are detailed above.

It is possible to manage a tournament enterily with arbitools, although is not a very user-friendly experience. Unless you are familiar with Emacs, of course. 

- First, you create an empty FIDE file and write manually the information of the tournament.

- Then you add the players. You can insert everything manually, checking with the FIDE list. The alternative is to create a csv file with the format recommended in the ``File Formats'' section (@xref{File Formats}) and add the players to the file with the corresponding option.

- After this, you can do the pairings through the option in the menu.

- You can also print the pairing clicking on ``List Pairings'', telling the program what round to print and going to the ``Pairing list'' buffer from the ``Buffers'' menu.

- When the tournamet is finished, you don't need to create the FIDE export file, because you already worked on it. You can generate the IT3 report by clicking on the option. You will get a pdf file in which you have to edit some data. You can do this with your favourite software, but I recommend editing the tex file created in the same folder and compile it with ``pdflatex''. Additionally, you can create the FEDA rating file, if the tournament is in Spain and use it to include and your tournament report.

- And that's it.

Additional functions are: updating the ratings on a csv file, delete a player who didn't play any games, delete the results of a round and a couple more. 

@section Graphical Interface
Although it should work just fine, this interface is not maintained anymore. It may not work properly. Invoking the graphical interface is easy. Just run ``arbitools-gui.py''. Choose your file, your options and press the button withe function you want to perform. The main screen looks like this:
@image{arbitools, 640, 480}

The interface is really easy to understand.
@subsection Update data
- Browse the tournament file in the ``input file'' box.

- Select an ELO list from the list. Some of the options may not be available until you download the corresponding files.

- Select a search method from the list.

- Click the data you want to update.

- Click the ``Update data'' button.

You will get the results in a file:

If you used a .veg file, a backup of the original file is renamed with the ``_old'' suffix.

If you used a .csv file, a file with the ``_update'' suffix is created with the updated data, the original file remains untouched.

If you used a .txt file, a file with the ``_export'' suffix is created with the updated data, the original file remains untouched.

@subsection Add players to an existing tournament
- Browse the tournament file in the ``input file'' box.

- Browse the file with additional players in ``file with new data''.

- Click ``Add data from file''.
@subsection Get the standings.
- Browse the tournament file in the ``input file'' box. 

- Click ``Get standings''.

This action produces the standings for a tournament. You will get the files:

- A file with the ``_standings.txt'' suffix with the standings in a text file.

- A file with the ``_standings.tex'' suffix with the standings in a LaTeX file, ready for pdflatex.

- A file with the ``_ARPO.csv'' suffix, with tiebreaks information. The library PyRP.py and _PyRP.py by Julio Gonzalez And Jose Carlos Diaz is used.

- A file with the ``Rating_admin_'' preffis, with the FEDA rating information for the Spanish Federation.

- A .tex file, with the suffix ``IT3'', that you can edit and compile to get a Tournament Report Form.

- If there is a latex environment installed, you will also get a .pdf file with the Tournament Report Form.

@section Command Line
Most of the features are available through the command line interface. In the first version of arbitools there were different commands for each function. The newer ``arbitools-run.py'', provides all the functions in just one comand. The older commands are referred to as ``obsolete''.

@subsection arbitools-run.py
This is the newest script that provides the access to the different Arbitools functions. The syntax is:
@code{arbitools-run.py <command> <argument(s)>}

Possible commands:

@indentedblock
@b{it3 <filename>} Get the it3 report form for ``filename''.
@end indentedblock

@indentedblock
@b{fedarating <filename>} Get the FEDA RatingAdmin file for ``filename''. 
@end indentedblock

@indentedblock
@b{update <filename>} Update the elo of ``filename''. If you use the option -l, you can specify fide or feda lists. If you dont use this, the custom file will be used. You need to have in your home directory the files ``elo_feda.xls'', ``players_list_xml.xml'' if you want to use the fide or feda lists. I recommend that you create a ``custom_elo.csv'' as described later.
@end indentedblock

@subsection arbitools-update.py(obsolete)
Updates the players information stored in a file. It is a very useful function when a new list is published and you had already set up the tournament.
@indentedblock
@b{-i} This argument takes the name of the input file. This is the file with the information we want to update.

You can use .veg files, .txt (FIDE Krause) or .csv. For details @xref{File Formats}.
@end indentedblock
@indentedblock
@b{-l} Write the name of the elo list here. ``fide'' uses the official fide list from the file ``players_list_xml.xml''. It won't work if you don't have that file in your folder. You can download it from www.fide.com. ``feda'' uses the feda list from the file ``elo_feda.xls''. You have to rename the file from www.feda.org. ``fidefeda'' uses the file ``FIDE-FEDA Vega.csv''. You can download it from www.jemchess.com. By default, it uses your personal ``custom_elo.csv'' file.
@end indentedblock

If you used a .veg file, a backup of the original file is renamed with the ``_old'' suffix.

If you used a .csv or a .xls file, a new file with the ``_update'' suffix is created with the updated data, the original file remains untouched.

If you used a .fegaxa file, a new file with the ``_update'' suffix is created with the updated data. Arbitools will try to produce a xls format file, but most likely a csv is going to be. Be careful about this, because if you want to use the produced file to be upgraded again, it has to be a xls file. What you can do is open with LibreOffice and save is as xls.

If you used a .txt file, a file with the ``_export'' suffix is created with the updated data, the original file remains untouched.

You can see a report of the updated actions in arbitools-report.log


@subsection arbitools-add.py(obsolete)
Adds extra players to an existing file.
@indentedblock
@b{-i} This argument takes the name of the input file. This is the file with the information we want to update.

You can use .veg files, .txt (FIDE Krause) or .csv. For details @xref{File Formats}.
@end indentedblock
@indentedblock
@b{-a} This argument takes the name of the file with the extra players you want to add. It should be a .csv file with the structure described in ``File Formats'' (@xref{File Formats}).

You can use .veg files, .txt (FIDE Krause) or .csv. For details @xref{File Formats}.
@end indentedblock


@subsection arbitools-standings.py(obsolete)
Produces the standings for a tournament. You will get the files:

- A file with the ``_standings.txt'' suffix with the standings in a text file.

- A file with the ``_standings.tex'' suffix with the standings in a LaTeX file, ready for pdflatex.

- A file with the ``_ARPO.csv'' suffix, with tiebreaks information. The library PyRP.py and _PyRP.py by Julio Gonzalez And Jose Carlos Diaz is used.

- A file with the ``Rating_admin_'' preffis, with the FEDA rating information for the Spanish Federation.

- A .tex file, with the suffix ``IT3'', that you can edit and compile to get a Tournament Report Form.

- If there is a latex environment installed, you will also get a .pdf file with the Tournament Report Form.


@indentedblock
@b{-i} This argument takes the name of the input file. It will only work witn .txt (FIDE Krause) or .veg. Other formats don't contain the tournament's information needed to produce the standings.
@end indentedblock

You can write a file ``.arbitools'', and define the tiebreak methods for ARPO. The structure of the file is as follows:

Methods:<methods>

Sort:<methods>

Either in the ``Methods'' or the ``Sort'' line you can choose: Name, Points, Bucholz, ARPO, and some more (see PyRP.py).

@node File Formats
@chapter File Formats

@section .veg files
This is the format of the Vega software, written by Luigi Forlano. Although it is not free software, the file format is free. This program is widely used in Spain and Italy.

@section .txt files (FIDE Krause)
This is the official format approved by FIDE.

@section .csv files
Chess Arbiter Tools accepts .csv with ``;'' separator and the following headings:

@code{NAME;COUNTRY;BIRTHDAY;G;TITLE;IDFIDE;ELOFIDE;KFIDE;IDNAT;ELONAT;K;CLUB}

You won't be able to produce reports from this kind of file, since it doesn't store the tournament information, only the players'.

This is the header you have to use in order to create your personal ``custom_elo.csv''

@section .xls files
Files with .xls format are admitted if they store the information with the followint format of columns. The name of the columns is not important in this case, just the data has to be in the right column.

@code{ID;NAME;TITLE;IDNAT;ELONAT;IDFIDE;ELOFIDE;BIRTHDAY;COUNTRY;G;SURNAME;FIRSTNAME}

@section .fegaxa files
A special kind of xls files are accepted if the .xls ending is replaced with a .fegaxa ending. This type of file is specially designed for the Galician Federation. The structure of the columns has to be:

@code{codigoFADA;codigoFEDA;codigoFIDE;DNI;LetraFinal;Apellidos;Nombre;FechaNacimiento;Hombre;email;Direccion;Telefono;Nacionalidad;Federado;NombreClub;Provincia;CodJugador;nombreLocalidad;Localidad;EloFADA;EloFEDA;EloFIDE}

This kind of files is very useful if you really need to store extra data about the players.


@node Common Arbiters Tasks with Emacs
@chapter Common Arbiters Tasks with Emacs.

The recommended way to manage a tournament with Arbitools is through a .trf tournament file. You can edit it manually or with the Arbitools commands from the Emacs menu options under ``Arbitools''. Every different kind of tournament is really the same in terms of the .trf FIDE file. Round robin, swiss, team, etc. In team tournaments an extra section is added at the end of the file. But it is not really necessary for elo administration. I think you could send a team tournament file in the same format as individual files. Sometimes, team tournament software is very problematic. They are usually necessary depending on your federation, because you may need to maintain the webpage from the software in the official federation site, but you can always work with the .trf file and import the data in your software before you upload it. The power of Arbitools is that you will be able to write a tournament report even if you are having troubles with your software.

To create a .trf file, you can use the option in the menu and change the data according to your tournament, or use your favourite tournament management software. If you name your file ending in .trf, the arbitools-mode will be automatically set in Emacs. In case you name the file with something else (.txt), for example, you will need to type ``M-x arbitools-mode'' (``Alt-x'' and then ``arbitools-mode'').

I recommend that the first thing you do is create a .csv file, with the header described in the ``File Formats'' section (@xref{File Formats}), with the data for your tournament. It can be useful for several purposes.

Summing up, use Emacs and Arbitools to maintain your .trf text file and optionally, import the data in your favourite software to get pairings and update to the internet site.

You can find more details in the ``Usage'' section (@xref{Usage}).

@node Common Arbiters Tasks with the command line interface
@chapter Common Arbiters Tasks with the command line interface.
You created a tournament and already have the file ``mytournament.veg'' with the tournaments information. You can do lots of operations with arbitools. For example:
@section Updating the players data in a file.
You want to add the FEDA elos to the players data. You type the following command:

@code{arbitools-run.py update mytournament.veg -l feda}

You want to update the FIDE elos because a new list was published:

@code{arbitools-run.py update mytournament.veg -l fide}

Just remember this process is really, really slow. It is because ``players_list_xml.xml'' is a very big file, and the .xml format is very unefficient.

@section Adding extra players to an existing file.
You got a new list of players that have to be added to your original file. The new list is called ``late_entries.csv''.

@code{arbitools-add.py -i mytournament.veg -a late_entries.csv}

Remember that the headings of the original file and the file with the extra players have to be identical. Be specially careful with the ``K'' fields. Sometimes, it is called ``KNAT''. Remember also that you should only add players to a tournament that has not started yet. If you add players to an already started tournament, you will corrupt the pairings information, and you won't be able to use the file anymore.

@section Getting the standings for a tournament.
This task is really easy to perform

@code{arbitools-run.py standings mytournament.veg}

You will get a .txt file with the standings. You will also get a .tex file you can compile with pdflatex and get a pdf. Additionally, it generates a file with the suffix ``_ARPO.csv'' with the ARPO tiebreak calculations. This is very experimental. This option is possible thanks to the python libraries written by Julio Gonzalez and Jose Carlos Diaz. More information on @url{http://eio.usc.es/pub/julio/Desempate/Performance_recursiva_en.htm}

@section Writing a tournament report.
It is recommended that you create your own ``custom_elo.csv'', with the information of the players you usually need or that you need for the actual tournament. Get this file update monthly with the official lists with the commands:

@code{arbitools-run.py update custom_elo.csv -l fide}

@code{arbitools-run.py update custom_elo_updated.csv -l feda}

After these two commands you will get ``custom_elo_updated_updated.csv''. Check if it is correct and rename it again to ``custom_elo.csv''

Use arbitools or you favourite pairings program to input the pairings and results. When the tournament is finished, use these commands with the TRF file:

@code{arbitools-run.py it3 <tournamentFIDEfile>}

@code{arbitools-run.py fedarating <tournamentFIDEfile>}

And that's it, you already have your FIDE TRF, your FEDA Rating_admin and your IT3 ready to send to your fedaration.

You can do all these tasks through Emacs, as described in the ``Usage'' section (@xref{Usage})

@node    The python library
@chapter The python library

Chess Arbiter Tools offers a python library which programmers can use in other programs. It provides the class ``Tournament'', with the following properties and methods:
@section Creating an instance of the class
You can create an instance of the class Tournament easily:
@code{mytournament = arbitools.Tournament()}
@section Properties
@indentedblock
@emph{info} This dictionary encapsulates important information about the tournament:
@enumerate
@item
@emph{TOURNAMENT_NAME}
@item
@emph{CITY}
@item
@emph{FED}
@item
@emph{BEGIN_DATE}
@item
@emph{END_DATE}
@item
@emph{ARBITER}
@item
@emph{DEPUTY}
@item
@emph{NUMBER_OF_ROUNDS}
@item
@emph{CURRENT_ROUND}
@item
@emph{NUMBER_OR_PLAYERS}
@end enumerate
@end indentedblock

@indentedblock
@emph{players data} List of dictionaries with the data of the players.
@enumerate
@item 
@emph{NAME}: Surname, Name
@item 
@emph{G}: Sex: ``m'' or ``f''
@item 
@emph{IDFIDE}
@item 
@emph{ELOFIDE}
@item 
@emph{COUNTRY}
@item 
@emph{TITLE}
@item 
@emph{ELONAT}
@item 
@emph{KFIDE}
@item 
@emph{CLUB}
@item 
@emph{BIRTHDAY}
@item 
@emph{KNAT}
@item 
@emph{IDNAT}


@end enumerate
@end indentedblock
@section Methods
@indentedblock
@emph{output_to_file(inputfile)} It takes one argument, the name of the file to output the information.
@end indentedblock
@indentedblock
@emph{export_to_file(inputfile)} This method creates a file with the official Krause FIDE format and fill it with the tournament info and the players data.
@end indentedblock
@indentedblock
@emph{applyARPO(inputfile)} It applies the tiebreaks created by Julio Gonzalez and Jose Carlos Diaz. It outputs the results to a file with the ``_ARPO.csv'' suffix.
@end indentedblock


@node Troubleshooting
@chapter Troubleshooting
Known bugs
@enumerate
@item
ARPO calculations fail in some situations. It has probably some problem with ``byed'' players.
@end enumerate

@bye
